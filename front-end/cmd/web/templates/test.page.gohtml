{{template "base" .}}

{{define "content" }}
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-5">Test microservices</h1>
                <hr>

                <a id="brokerBtn" class="btn btn-outline-secondary" href="javascript:void(0)">Test Broker</a>
                <a id="authBrokerBtn" class="btn btn-outline-secondary" href="javascript:void(0)">Test Auth</a>
                <a id="logBtn" class="btn btn-outline-secondary" href="javascript:void(0)">Test Log</a>
                <a id="logRabbitBtn" class="btn btn-outline-secondary" href="javascript:void(0)">Test Log via Rabbit</a>
                <a id="logRPCBtn" class="btn btn-outline-secondary" href="javascript:void(0)">Test Log via RPC</a>
                <a id="logGRPCBtn" class="btn btn-outline-secondary" href="javascript:void(0)">Test Log via gRPC</a>               
                <a id="mailBtn" class="btn btn-outline-secondary" href="javascript:void(0)">Test Mail</a>

                <div id="output" class="mt-5" style="outline: 1px solid silver; padding: 2em;">
                    <span class="text-muted">Output shows here...</span>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h4 class="mt-5">Sent</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="payload"><span class="text-muted">Nothing sent yet...</span></pre>
                </div>
            </div>
            <div class="col">
                <h4 class="mt-5">Received</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="received"><span class="text-muted">Nothing received yet...</span></pre>
                </div>
            </div>
        </div>
    </div>
{{end}}

{{define "js"}}
    <script>
        let brokerBtn = document.getElementById("brokerBtn");
        let authBrokerBtn = document.getElementById("authBrokerBtn");
        let logBtn = document.getElementById("logBtn");
        let logRabbitBtn = document.getElementById("logRabbitBtn");
        let logRPCBtn = document.getElementById("logRPCBtn");
        let logGRPCBtn = document.getElementById("logGRPCBtn");
        let mailBtn = document.getElementById("mailBtn");

        let sent = document.getElementById("payload");
        let received = document.getElementById("received");
        let output = document.getElementById("output");

        brokerBtn.addEventListener("click", () => {
            const body = {
                method: "POST",
            }

            fetch("http:\/\/localhost:8080", body)
                .then(response => response.json())
                .then(data => {
                    sent.innerHTML = JSON.stringify("No Data", null, 4);
                    received.innerHTML = JSON.stringify(data, null, 4);
                    if (data.error) {
                       console.log(data.message)
                    } else {
                        output.innerHTML += `<br><strong>Response from broker service: </strong> ${data.message}`
                    }

                })
                .catch(error => {
                    output.innerHTML += `<br><strong>Error: </strong> ${error.message}`
                });
        });

        authBrokerBtn.addEventListener("click", () => {
            const payload = {
                action: "auth",
                auth: {
                    email: "admin@example.com",
                    password: "verysecret"
                }
            }

            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: "POST",
                headers: headers,
                body: JSON.stringify(payload)
            }

            fetch("http:\/\/localhost:8080/handle", body)
                .then(response => response.json())
                .then(data => {
                    sent.innerHTML = JSON.stringify(payload, null, 4);
                    received.innerHTML = JSON.stringify(data, null, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>Error: </strong> ${data.message}`
                    } else {
                        output.innerHTML += `<br><strong>Response from broker service: </strong> ${data.message}`
                    }

                })
                .catch(error => {
                    output.innerHTML += `<br><strong>Error: </strong> ${error.message}`
                });
        });

        const handleLogEvent = (logType) => {
            const payload = {
                action: logType,
                log: {
                    name: "event",
                    data: "some kind of data"
                }
            }

            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: "POST",
                headers: headers,
                body: JSON.stringify(payload)
            }

            fetch("http:\/\/localhost:8080/handle", body)
                .then(response => response.json())
                .then(data => {
                    sent.innerHTML = JSON.stringify(payload, null, 4);
                    received.innerHTML = JSON.stringify(data, null, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>Error: </strong> ${data.message}`
                    } else {
                        output.innerHTML += `<br><strong>Response from broker service: </strong> ${data.message}`
                    }

                })
                .catch(error => {
                    output.innerHTML += `<br><strong>Error: </strong> ${error.message}`
                });
        }

        logBtn.addEventListener("click", () => {
            handleLogEvent("log");
        });

        logRabbitBtn.addEventListener("click", () => {
            handleLogEvent("log_rabbit");
        });

        logRPCBtn.addEventListener("click", () => {
            handleLogEvent("log_rpc");
        });

        logGRPCBtn.addEventListener("click", () => {
            handleLogEvent("log_grpc");
        });

        mailBtn.addEventListener("click", () => {
            const payload = {
                action: "mail",
                mail: {
                    from: "me@example.com",
                    to: ["you@there.ca"],
                    subject: "Test email",
                    message: "Hello world! This is a test email."
                }
            }

            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: "POST",
                headers: headers,
                body: JSON.stringify(payload)
            }

            fetch("http:\/\/localhost:8080/handle", body)
                .then(response => response.json())
                .then(data => {
                    sent.innerHTML = JSON.stringify(payload, null, 4);
                    received.innerHTML = JSON.stringify(data, null, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>Error: </strong> ${data.message}`
                    } else {
                        output.innerHTML += `<br><strong>Response from broker service: </strong> ${data.message}`
                    }

                })
                .catch(error => {
                    output.innerHTML += `<br><strong>Error: </strong> ${error.message}`
                });

        });
        
    </script>
{{end}}
